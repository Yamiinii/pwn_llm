reference_codes = [
    """#include <stdio.h>
#include <string.h>

void vulnerableFunction(char *input) {
    char buffer[10];
    strcpy(buffer, input);
}

int main() {
    char userInput[50];
    printf("Enter some text: ");
    fgets(userInput, sizeof(userInput), stdin);
    vulnerableFunction(userInput);
    return 0;
}""",

    """#include <stdio.h>
#include <stdlib.h>

int main() {
    char *ptr = (char *)malloc(10 * sizeof(char));
    strcpy(ptr, "Hello");
    free(ptr);

    // Use-after-free vulnerability
    printf("%s\\n", ptr);

    return 0;
}""",

    """#include <stdio.h>
#include <string.h>

void vulnerableFunction(char *input) {
    char buffer[10];
    strcpy(buffer, input);
}

int main() {
    char userInput[50];
    printf("Enter some text: ");
    fgets(userInput, sizeof(userInput), stdin);
    vulnerableFunction(userInput);
    return 0;
}""",

    """#include <stdio.h>
#include <stdlib.h>

int main() {
    char *ptr = (char *)malloc(10 * sizeof(char));
    strcpy(ptr, "Hello");
    free(ptr);

    // Use-after-free vulnerability
    printf("%s\\n", ptr);

    return 0;
}""",

    """#include <stdio.h>
#include <string.h>

void vulnerableFunction(char *input) {
    char buffer[10];
    strcpy(buffer, input);
}

int main() {
    char userInput[50];
    printf("Enter some text: ");
    fgets(userInput, sizeof(userInput), stdin);
    vulnerableFunction(userInput);
    return 0;
}""",

    """#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

int sharedResource = 0;

void *threadFunction(void *arg) {
    if (sharedResource == 0) {
        sharedResource = 1;
        printf("Thread set sharedResource to 1\\n");
    }
    return NULL;
}

int main() {
    pthread_t thread1, thread2;

    pthread_create(&thread1, NULL, threadFunction, NULL);
    pthread_create(&thread2, NULL, threadFunction, NULL);

    pthread_join(thread1, NULL);
    pthread_join(thread2, NULL);

    printf("Final value of sharedResource: %d\\n", sharedResource);

    return 0;
}""",

    """#include <stdio.h>
#include <stdlib.h>

void processFile(const char *filename) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        perror("Failed to open file");
        return;
    }
    // Process the file
    fclose(file);
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Usage: %s <filename>\\n", argv[0]);
        return 1;
    }
    processFile(argv[1]);
    return 0;
}""",

    """#include <stdio.h>
#include <mysql/mysql.h>

int main() {
    MYSQL *conn;
    MYSQL_RES *res;
    MYSQL_ROW row;

    conn = mysql_init(NULL);

    if (conn == NULL) {
        fprintf(stderr, "mysql_init() failed\\n");
        return EXIT_FAILURE;
    }

    if (mysql_real_connect(conn, "localhost", "user", "password", "database", 0, NULL, 0) == NULL) {
        fprintf(stderr, "mysql_real_connect() failed\\n");
        mysql_close(conn);
        return EXIT_FAILURE;
    }

    char query[256];
    char userInput[100];
    printf("Enter username: ");
    fgets(userInput, sizeof(userInput), stdin);

    // Vulnerable to SQL injection
    snprintf(query, sizeof(query), "SELECT * FROM users WHERE username = '%s'", userInput);

    if (mysql_query(conn, query)) {
        fprintf(stderr, "SELECT * FROM users WHERE username = '%s' failed\\n", userInput);
        mysql_close(conn);
        return EXIT_FAILURE;
    }

    res = mysql_store_result(conn);

    if (res == NULL) {
        fprintf(stderr, "mysql_store_result() failed\\n");
        mysql_close(conn);
        return EXIT_FAILURE;
    }

    int num_fields = mysql_num_fields(res);

    while ((row = mysql_fetch_row(res))) {
        for(int i = 0; i < num_fields; i++) {
            printf("%s ", row[i] ? row[i] : "NULL");
        }
        printf("\\n");
    }

    mysql_free_result(res);
    mysql_close(conn);

    return EXIT_SUCCESS;
}""",

    """<!DOCTYPE html>
<html>
<head>
    <title>XSS Vulnerable Page</title>
</head>
<body>
    <h1>Welcome to the XSS Vulnerable Page</h1>
    <form action="vulnerable_page.php" method="get">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name">
        <input type="submit" value="Submit">
    </form>
    <script>
        function displayUserInput() {
            var urlParams = new URLSearchParams(window.location.search);
            var name = urlParams.get('name');
            document.write("Hello, " + name + "!");
        }
        displayUserInput();
    </script>
</body>
</html>""",

    """<!DOCTYPE html>
<html>
<head>
    <title>XSS Vulnerable Page</title>
</head>
<body>
    <h1>Welcome to the XSS Vulnerable Page</h1>
    <form action="vulnerable_page.php" method="get">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name">
        <input type="submit" value="Submit">
    </form>
    <script>
        function displayUserInput() {
            var urlParams = new URLSearchParams(window.location.search);
            var name = urlParams.get('name');
            document.write("Hello, " + name + "!");
        }
        displayUserInput();
    </script>
</body>
</html>"""
]
